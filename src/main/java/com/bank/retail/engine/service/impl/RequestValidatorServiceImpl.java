package com.bank.retail.engine.service.impl;

import com.bank.retail.api.dto.XmlConversionRequest;
import com.bank.retail.engine.service.RequestValidatorService;
import com.bank.retail.engine.service.XsdParserService;
import com.bank.retail.engine.service.RequestDataService;
import com.bank.retail.exception.ValidationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
public class RequestValidatorServiceImpl implements RequestValidatorService {
    
    private static final Logger logger = LoggerFactory.getLogger(RequestValidatorService.class);
    
    private final XsdParserService xsdParserService;
    private final RequestDataService requestDataService;
    
    public RequestValidatorServiceImpl(XsdParserService xsdParserService, RequestDataService requestDataService) {
        this.xsdParserService = xsdParserService;
        this.requestDataService = requestDataService;
    }
    
    public void validateRequest(String serviceName, XmlConversionRequest request) throws Exception {
        logger.debug("Validating request for service: {}", serviceName);
        
        Map<String, Object> requestData = requestDataService.prepareRequestData(request, serviceName);
        List<String> mandatoryFields = xsdParserService.getMandatoryFieldsFromXsd(
            xsdParserService.parseXsd(serviceName));
        List<String> missingFields = new ArrayList<>();
        
        List<String> autoGeneratedFields = List.of("referenceNum", "requestTime");
        
        for (String field : mandatoryFields) {
            if (!autoGeneratedFields.contains(field) && 
                (!requestData.containsKey(field) || requestData.get(field) == null || 
                (requestData.get(field) instanceof String && ((String) requestData.get(field)).trim().isEmpty()))) {
                missingFields.add(field);
            }
        }
        
        if (!missingFields.isEmpty()) {
            logger.warn("Validation failed for service {}: missing fields {}", serviceName, missingFields);
            throw new ValidationException(
                "Missing mandatory fields: " + String.join(", ", missingFields),
                missingFields,
                "MANDATORY_FIELDS_MISSING"
            );
        }
    }
    
    
}
